from sklearn.cluster import SpectralClustering
from sklearn.metrics import fowlkes_mallows_score
from plotter import scatter1d,scatter2d,scatter3d
from reddit_fetch import fetch
from kate_gpu import train
from preprocessing import vectorizer,np
from file_manager import createdir,copy,delete_directories
import tkinter as tk
from tkinter.filedialog import askdirectory
from tkinter.ttk import Button
def browse():
    dir=askdirectory()
    path.set(dir)
def fetch_doc():
    ids,docs=fetch(sub_input.get(),post_var.get(),sample_size_input.get(),path.get())
    docs=vectorizer(docs)
    nos.set(str(docs.shape[0]))
    feature_var.set(str(docs.shape[2]))
    np.save(path.get()+'\\tf.npy',docs)
    np.save(path.get()+'\\names.npy',ids)
def train_model():
    tf=np.load(path.get()+'\\tf.npy')
    l=train(tf,int(epocs.get()),tf.shape[2],int(output_size.get()),int(k_input.get()),float(a_input.get()),float(lr_input.get()),path.get()+'\\encoded.npy')
    error_var.set(float(l))
def repersent():
    f=np.load(path.get()+'\\encoded.npy')
    if f.shape[1]==1:
        scatter1d(f)
    elif f.shape[1]==2:
        scatter2d(f)
    elif f.shape[1]==3:
        scatter3d(f)
    else:
        pop=tk.Toplevel(win)
        pop.title('Can not repersent!')
        l=tk.Label(pop,text='The dimentions must be equal 1,2 or 3.')
        l.pack()
def run_cluestring():
    delete_directories(path.get())
    encoded=np.load(path.get()+'\\encoded.npy')
    ids=np.load(path.get()+'\\names.npy')
    true=np.load(path.get()+'\\real_labels.npy')
    num_of_subs=len(np.unique(true))
    spec=SpectralClustering(gamma=float(gemma_input.get()),n_clusters=num_of_subs)
    spec.fit(encoded)
    createdir(path.get(),spec.labels_)
    copy(path.get(),ids,spec.labels_)
    rand_index.set(str(fowlkes_mallows_score(true,spec.labels_)))
    np.save(path.get()+'\predicted_labels.npy',spec.labels_)
if __name__=='__main__':
    win=tk.Tk()
    win.title('Social Media Document Clustring')
    win.geometry('500x550')
    reader=tk.LabelFrame(win,text='Readdit')
    sub=tk.Label(reader,text='sub:r/')
    sample_size=tk.Label(reader,text='sample size:')
    save=tk.Label(reader,text='Save:')
    sub_input=tk.Entry(reader)
    sample_size_input=tk.Spinbox(reader,from_=1,to=100,increment=1)
    post_var=tk.StringVar()
    post_var.set('hot')
    values=['hot','new']
    post_type=tk.OptionMenu(reader,post_var,*values)

    post_Language=tk.StringVar()
    post_Language.set('English')
    val_language=['English','Farsi']
    post_type_language=tk.OptionMenu(reader,post_Language,*val_language)
   
    path=tk.StringVar()
    save_input=tk.Entry(reader,textvariable=path)
    dir_dialog=Button(reader,text='Browse',command=browse)
    run_fetch=Button(reader,text='Fetch',command=fetch_doc)
    reader.pack(fill=tk.Y)
    sub.grid(row=0,column=0)
    sample_size.grid(row=1,column=0)
    save.grid(row=2,column=0)
    sub_input.grid(row=0,column=1)
    sample_size_input.grid(row=1,column=1)
    save_input.grid(row=2,column=1)
    dir_dialog.grid(row=2,column=2)
    run_fetch.grid(row=3,column=1)
    post_type.grid(row=3,column=0)
    post_type_language.grid(row=3 ,column=2)
    kate_parameters=tk.LabelFrame(win,text='KATE')
    nos=tk.StringVar()
    nos_label=tk.Label(kate_parameters,text='Sample Size=')
    nos_text=tk.Label(kate_parameters,textvariable=nos)
    feature_var=tk.StringVar()
    feature_label=tk.Label(kate_parameters,text='Features=')
    feature_text=tk.Label(kate_parameters,textvariable=feature_var)
    output_size_label=tk.Label(kate_parameters,text='Output Size=')
    k=tk.Label(kate_parameters,text='K=')
    a=tk.Label(kate_parameters,text='a=')
    epocs_label=tk.Label(kate_parameters,text='epocs=')
    lr=tk.Label(kate_parameters,text='Learning Rate=')
    error_text=tk.Label(kate_parameters,text='BCE loss=')
    error_var=tk.StringVar()
    error_label=tk.Label(kate_parameters,textvariable=error_var)
    output_size=tk.Spinbox(kate_parameters,from_=1,to=100,increment=1)
    k_input=tk.Entry(kate_parameters)
    a_input=tk.Entry(kate_parameters)
    lr_input=tk.Spinbox(kate_parameters,from_=0.01,to=10,increment=0.01)
    epocs=tk.Spinbox(kate_parameters,from_=1,to=1000000,increment=1)
    kate_btn=Button(kate_parameters,text='Train',command=train_model)
    demon_btn=Button(kate_parameters,text='Repersent',command=repersent)
    kate_parameters.pack(fill=tk.Y)
    nos_label.grid(row=0,column=0)
    feature_label.grid(row=1,column=0)
    output_size_label.grid(row=2,column=0)
    k.grid(row=3,column=0)
    a.grid(row=4,column=0)
    lr.grid(row=5,column=0)
    epocs_label.grid(row=6,column=0)
    error_text.grid(row=7,column=0)
    kate_btn.grid(row=8,column=0)
    demon_btn.grid(row=8,column=1)
    nos_text.grid(row=0,column=1)
    feature_text.grid(row=1,column=1)
    output_size.grid(row=2,column=1)
    k_input.grid(row=3,column=1)
    a_input.grid(row=4,column=1)
    lr_input.grid(row=5,column=1)
    epocs.grid(row=6,column=1)
    error_label.grid(row=7,column=1)
    dbscan_parameters=tk.LabelFrame(win,text='Spectral Clustering')
    gemma=tk.Label(dbscan_parameters,text='Gemma=')
    rand=tk.Label(dbscan_parameters,text='fowlkes mallows score=')
    rand_index=tk.StringVar()
    rand_text=tk.Label(dbscan_parameters,textvariable=rand_index)
    gemma_input=tk.Spinbox(dbscan_parameters,from_=0.01,to=10,increment=0.01)
    clustering_btn=Button(dbscan_parameters,text='Run',command=run_cluestring)
    dbscan_parameters.pack(fill=tk.Y)
    gemma.grid(row=0,column=0)
    rand.grid(row=1,column=0)
    gemma_input.grid(row=0,column=1)
    rand_text.grid(row=1,column=1)
    clustering_btn.grid(row=2,column=0)
    win.mainloop()